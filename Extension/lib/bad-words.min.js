class Filter {
  constructor(options = {}) {
    this.list = options.list || [];
    this.splitRegex = options.splitRegex || /\b/;
    this.placeHolder = options.placeHolder || "*";
    this.regex = options.regex || /[^a-zA-Z0-9|\u0600-\u06FF]/g;
    this.replaceRegex = options.replaceRegex || /\w/g;
    this.exclude = options.exclude || [];
    this.words = new Set(this.list);
  }

  isProfane(string) {
    if (!string) return false;
    const words = string.toLowerCase().split(this.splitRegex);
    return words.some(
      (word) => this.words.has(word) && !this.exclude.includes(word)
    );
  }

  replaceWord(string) {
    return string.replace(this.replaceRegex, this.placeHolder);
  }

  clean(string) {
    if (!string) return "";
    return string
      .split(this.splitRegex)
      .map((word) => (this.isProfane(word) ? this.replaceWord(word) : word))
      .join(this.splitRegex.exec(string)[0]);
  }

  addWords(...words) {
    words.forEach((word) => this.words.add(word.toLowerCase()));
  }

  removeWords(...words) {
    words.forEach((word) => this.words.delete(word.toLowerCase()));
  }
}
